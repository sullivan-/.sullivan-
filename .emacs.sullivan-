;; -*- mode: lisp -*-
;;
;; .emacs.sullivan-
;;
;; a .emacs to use anywhere. intended to be loaded from the real .emacs file like so:
;; 
;; (load "~/.emacs.sullivan-")

;; hints:
;; M-C-x (eval-defun)


(setq
 inhibit-startup-screen t
 create-lockfiles nil
 make-backup-files nil
 column-number-mode t
 scroll-error-top-bottom t
 show-paren-delay 0.5
 use-package-always-ensure t
 sentence-end-double-space nil)

(require 'package)
(setq
 package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
		    ("org" . "http://orgmode.org/elpa/")
		    ("melpa" . "http://melpa.org/packages/")
		    ("melpa-stable" . "http://stable.melpa.org/packages/"))
 package-archive-priorities '(("melpa-stable" . 1)))

(package-initialize)
(when (not package-archive-contents)
  (package-refresh-contents)
  (package-install 'use-package))

(package-install 'use-package)
(require 'use-package)

;; Make all yes-or-no questions as y-or-n
(fset 'yes-or-no-p 'y-or-n-p)

(setq-default indent-tabs-mode nil) ; no tabs

(setq inhibit-startup-message t
      find-file-visit-truename t    ; follow sym links without asking
      manual-program "man"
      completion-ignore-case t
      comment-start "# "            ; i want the space there, for fundamental mode
      comment-end ""
      text-mode-hook 'my-text-mode
      default-major-mode 'text-mode
      dabbrev-case-fold-search nil
)

(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (setq show-trailing-whitespace t)
            (show-paren-mode)
            ;; (focus-mode)
            ;; (rainbow-mode)
            (prettify-symbols-mode)
            (eldoc-mode)
            ;; (flycheck-mode)
            (yas-minor-mode)
            ;; (company-mode)
            ;; (smartparens-strict-mode)
            ;; (rainbow-delimiters-mode)
            ))

(defun my-text-mode () (auto-fill-mode))

(global-set-key (kbd "C-x c") 'comment-region)
(global-set-key "\C-XM" 'magit-status)
(global-set-key "\C-XG" 'goto-line)
(global-set-key "\C-XI" 'indent-region)

(define-key ctl-x-map "\^M" 'magit-status)
(define-key ctl-x-map "\^G" 'goto-line)
(define-key ctl-x-map "\^I" 'indent-region)

;; expand filenames in minibuffer
(load "mbexpand" t t)

;; display time of day during session
(display-time)

(add-hook 'java-mode-hook
(function (lambda ()
            (c-set-offset 'substatement-open 0)
            (setq c-auto-newline nil)
            (setq c-basic-offset 4)
            (setq indent-tabs-mode nil))))

;; OK, so upcasing region is OK, but downcasing is not?!
(put 'downcase-region 'disabled t)
(put 'upcase-region 'disabled nil)

(global-auto-revert-mode)
(column-number-mode)

;;;; ido stuff - autocompletion for switching buffers and finding files

(require 'ido)
(setq 
 ido-save-directory-list-file "~/.emacs.d/cache/ido.last"

 ido-ignore-buffers ;; ignore these guys
 '("\\` " "^\*Mess" "^\*Back" ".*Completion" "^\*Ido" "^\*trace"
   "^\*compilation" "^\*GTAGS" "^session\.*" "^\*")

 ido-work-directory-list '("~/" "~/Downloads" "~/workspace/rnai/screening/analysis-toolkit")
 ido-case-fold  t                 ; be case-insensitive

 ido-enable-last-directory-history t ; remember last used dirs
 ido-max-work-directory-list 30   ; should be enough
 ido-max-work-file-list      50   ; remember many
 ido-use-filename-at-point nil    ; don't use filename at point (annoying)
 ido-use-url-at-point nil         ; don't use url at point (annoying)
 
 ido-enable-flex-matching nil     ; don't try to be too smart
 ido-max-prospects 8              ; don't spam my minibuffer
 ido-confirm-unique-completion t) ; wait for RET, even with unique completion

;; when using ido, the confirmation is rather annoying...
(setq confirm-nonexistent-file-or-buffer nil)
(ido-mode 'both) ; for buffers and files

;;;; scala

(use-package scala-mode :interpreter ("scala" . scala-mode))

;; turn these on for scala-mode problems with super complicated scala files:
;; (setq max-lisp-eval-depth 50000)
;; (setq max-specpdl-size 5000)

(add-hook 'scala-mode-hook
          (lambda ()

	    ;; don't override M-. with ensime command. still using tags here tyvm
            (define-key ensime-mode-map (kbd "M-.") nil)

	    ;; make tab indent even if i am in the middle of the line
	    (setq-default tab-always-indent t)

	    ;; aligns asterix in multi-line comment under first line
	    (setq scala-indent:use-javadoc-style t)

;;            ; not happy with these keybindings maybe, but just trying
;;            ; to keep the commands available for now:                        
;;            (define-key ensime-mode-map (kbd "C-c q") 'ensime-edit-definition)
;;            (define-key ensime-mode-map (kbd "C-c w") 'ensime-inspect-by-path)
	    ))

;; https://github.com/AndreaCrotti/yasnippet-snippets/tree/master/scala-mode
(add-hook 'scala-mode-hook #'yas-minor-mode)

(require 'ensime)

;;(define-key ensime-mode-map [("M-.")] find-tag)
;;(define-key ensime-mode-map [("C-M-.")] 'ensime-edit-definition)

;; http://stackoverflow.com/questions/21776466/how-to-make-enter-do-go-to-the-selected-type-or-method-when-using-ensime-global
;; (define-key ensime-search-mode-map (kbd "RET") 'ensime-search-choose-current-result)


;;;; magit stuff

(require 'magit)

(defun disable-magit-highlight-in-buffer ()
  (face-remap-add-relative 'magit-item-highlight '()))

(add-hook 'magit-status-mode-hook 'disable-magit-highlight-in-buffer)

;; change magit diff colors
;;(eval-after-load 'magit
;;  '(custom-set-faces
;;    '(magit-diff-add ((t (:foreground "#149914" :background nil :inherit nil))))
;;    '(magit-diff-def ((t (:foreground "#991414" :background nil :inherit nil))))))

;;  (progn
;;     (set-face-foreground 'magit-diff-add "green3")
;;     (set-face-foreground 'magit-diff-del "red3")
;;     (when (not window-system)
;;       (set-face-background 'magit-item-highlight "black"))))


  
