; .emacs.sullivan-
;
; a .emacs to use anywhere. intended to be loaded from the real .emacs
; file like so:
; 
; (load "~/.emacs.sullivan-")
; 
; some code thanks to {eb,bill}@cs.umb.edu

; Okay, using Melpa. is that okay with you?
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)
             (package-initialize)
             (when (not package-archive-contents)
             (package-refresh-contents))

; am i still using this?
(add-to-list 'load-path "~/.emacs.d.sullivan-/emacs-scala-mode")
(require 'scala-mode-auto)

;; Make all yes-or-no questions as y-or-n
(fset 'yes-or-no-p 'y-or-n-p)

;;; When opening a file that is a symbolic link, don't ask whether I
;;; want to follow the link. Just do it
(setq find-file-visit-truename t)

; no tabs!
(setq-default indent-tabs-mode nil)

(setq inhibit-startup-message t
      manual-program "man"
      completion-ignore-case t
      comment-start "# "  ; I want the space there, for fundamental mode
      comment-end ""
      text-mode-hook 'my-text-mode
      default-major-mode 'text-mode
      dabbrev-case-fold-search nil
)

(defun my-text-mode () (auto-fill-mode))

(global-set-key "\C-XM" 'magit-status)
(global-set-key "\C-XG" 'goto-line)
(global-set-key "\C-XI" 'indent-region)

(define-key ctl-x-map "\^M" 'magit-status)
(define-key ctl-x-map "\^G" 'goto-line)
(define-key ctl-x-map "\^I" 'indent-region)

; expand filenames in minibuffer
(load "mbexpand" t t)

; display time of day during session
(display-time)

; Java?!
(add-hook 'java-mode-hook
(function (lambda ()
            (c-set-offset 'substatement-open 0)
            (setq c-auto-newline nil)
            (setq c-basic-offset 4)
            (setq indent-tabs-mode nil))))

; OK, so upcasing region is OK, but downcasing is not?!
(put 'downcase-region 'disabled t)
(put 'upcase-region 'disabled nil)

;;;; ido stuff - autocompletion for switching buffers and finding files

(require 'ido)
(setq 
 ido-save-directory-list-file "~/.emacs.d/cache/ido.last"

 ido-ignore-buffers ;; ignore these guys
 '("\\` " "^\*Mess" "^\*Back" ".*Completion" "^\*Ido" "^\*trace"
   "^\*compilation" "^\*GTAGS" "^session\.*" "^\*")

 ido-work-directory-list '("~/" "~/Downloads" "~/workspace/rnai/screening/analysis-toolkit")
 ido-case-fold  t                 ; be case-insensitive

 ido-enable-last-directory-history t ; remember last used dirs
 ido-max-work-directory-list 30   ; should be enough
 ido-max-work-file-list      50   ; remember many
 ido-use-filename-at-point nil    ; don't use filename at point (annoying)
 ido-use-url-at-point nil         ; don't use url at point (annoying)
 
 ido-enable-flex-matching nil     ; don't try to be too smart
 ido-max-prospects 8              ; don't spam my minibuffer
 ido-confirm-unique-completion t) ; wait for RET, even with unique completion

;; when using ido, the confirmation is rather annoying...
(setq confirm-nonexistent-file-or-buffer nil)
(ido-mode 'both) ;; for buffers and files


;;;;;; trying to set up ENSIME:

;; If necessary, make sure "sbt" and "scala" are in the PATH environment
;; (setenv "PATH" (concat "/path/to/sbt/bin:" (getenv "PATH")))
;; (setenv "PATH" (concat "/path/to/scala/bin:" (getenv "PATH")))
;;
;; On Macs, it might be a safer bet to use exec-path instead of PATH, for instance:
;; (setq exec-path (append exec-path '("/usr/local/bin")))

(require 'ensime)
(add-hook 'scala-mode-hook 'ensime-scala-mode-hook)

;; OPTIONAL
;; there are some great Scala yasnippets, browse through:
;; https://github.com/AndreaCrotti/yasnippet-snippets/tree/master/scala-mode
(add-hook 'scala-mode-hook #'yas-minor-mode)
;; but company-mode / yasnippet conflict. Disable TAB in company-mode
;; with
(define-key company-active-map [tab] nil)

(require 'magit)
