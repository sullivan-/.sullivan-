; .emacs.sullivan-
;
; a .emacs to use anywhere. intended to be loaded from the real .emacs
; file like so:
; 
; (load "~/.emacs.sullivan-")
; 
; some code thanks to {eb,bill}@cs.umb.edu

(setq
 inhibit-startup-screen t
 create-lockfiles nil
 make-backup-files nil
 column-number-mode t
 scroll-error-top-bottom t
 show-paren-delay 0.5
 use-package-always-ensure t
 sentence-end-double-space nil)

(require 'package)
(setq
 package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
		    ("org" . "http://orgmode.org/elpa/")
		    ("melpa" . "http://melpa.org/packages/")
		    ("melpa-stable" . "http://stable.melpa.org/packages/"))
 package-archive-priorities '(("melpa-stable" . 1)))

(package-initialize)
(when (not package-archive-contents)
  (package-refresh-contents)
  (package-install 'use-package))

(package-install 'use-package)
(require 'use-package)

;; Make all yes-or-no questions as y-or-n
(fset 'yes-or-no-p 'y-or-n-p)

;;; When opening a file that is a symbolic link, don't ask whether I
;;; want to follow the link. Just do it
(setq find-file-visit-truename t)

; no tabs!
(setq-default indent-tabs-mode nil)

(setq inhibit-startup-message t
      manual-program "man"
      completion-ignore-case t
      comment-start "# "  ; I want the space there, for fundamental mode
      comment-end ""
      text-mode-hook 'my-text-mode
      default-major-mode 'text-mode
      dabbrev-case-fold-search nil
)

(defun my-text-mode () (auto-fill-mode))

(global-set-key (kbd "C-x c") 'comment-region)
(global-set-key "\C-XM" 'magit-status)
(global-set-key "\C-XG" 'goto-line)
(global-set-key "\C-XI" 'indent-region)

(define-key ctl-x-map "\^M" 'magit-status)
(define-key ctl-x-map "\^G" 'goto-line)
(define-key ctl-x-map "\^I" 'indent-region)

; expand filenames in minibuffer
(load "mbexpand" t t)

; display time of day during session
(display-time)

; Java?!
(add-hook 'java-mode-hook
(function (lambda ()
            (c-set-offset 'substatement-open 0)
            (setq c-auto-newline nil)
            (setq c-basic-offset 4)
            (setq indent-tabs-mode nil))))

; OK, so upcasing region is OK, but downcasing is not?!
(put 'downcase-region 'disabled t)
(put 'upcase-region 'disabled nil)

(global-auto-revert-mode)
(column-number-mode)

;;;; ido stuff - autocompletion for switching buffers and finding files

(require 'ido)
(setq 
 ido-save-directory-list-file "~/.emacs.d/cache/ido.last"

 ido-ignore-buffers ;; ignore these guys
 '("\\` " "^\*Mess" "^\*Back" ".*Completion" "^\*Ido" "^\*trace"
   "^\*compilation" "^\*GTAGS" "^session\.*" "^\*")

 ido-work-directory-list '("~/" "~/Downloads" "~/workspace/rnai/screening/analysis-toolkit")
 ido-case-fold  t                 ; be case-insensitive

 ido-enable-last-directory-history t ; remember last used dirs
 ido-max-work-directory-list 30   ; should be enough
 ido-max-work-file-list      50   ; remember many
 ido-use-filename-at-point nil    ; don't use filename at point (annoying)
 ido-use-url-at-point nil         ; don't use url at point (annoying)
 
 ido-enable-flex-matching nil     ; don't try to be too smart
 ido-max-prospects 8              ; don't spam my minibuffer
 ido-confirm-unique-completion t) ; wait for RET, even with unique completion

;; when using ido, the confirmation is rather annoying...
(setq confirm-nonexistent-file-or-buffer nil)
(ido-mode 'both) ;; for buffers and files


;;;; scala

(use-package scala-mode :interpreter ("scala" . scala-mode))

(setq scala-indent:use-javadoc-style t)
(setq max-lisp-eval-depth 50000)
(setq max-specpdl-size 5000)

;; If necessary, make sure "sbt" and "scala" are in the PATH environment
;; (setenv "PATH" (concat "/path/to/sbt/bin:" (getenv "PATH")))
;; (setenv "PATH" (concat "/path/to/scala/bin:" (getenv "PATH")))
;;
;; On Macs, it might be a safer bet to use exec-path instead of PATH, for instance:
;; (setq exec-path (append exec-path '("/usr/local/bin")))

;(require 'ensime)
;(add-hook 'scala-mode-hook
;          (lambda ()
;            (define-key ensime-mode-map (kbd "M-.") nil)
;            ; not happy with these keybindings maybe, but just trying
;            ; to keep the commands available for now:                        
;            (define-key ensime-mode-map (kbd "C-c q") 'ensime-edit-definition)
;            (define-key ensime-mode-map (kbd "C-c w") 'ensime-inspect-by-path)
;            ))

;(define-key ensime-mode-map [("M-.")] find-tag)
;(define-key ensime-mode-map [("C-M-.")] 'ensime-edit-definition)

;; http://stackoverflow.com/questions/21776466/how-to-make-enter-do-go-to-the-selected-type-or-method-when-using-ensime-global
;(define-key ensime-search-mode-map (kbd "RET") 'ensime-search-choose-current-result)


;; OPTIONAL
;; there are some great Scala yasnippets, browse through:
;; https://github.com/AndreaCrotti/yasnippet-snippets/tree/master/scala-mode

(add-hook 'scala-mode-hook #'yas-minor-mode)


;;;; magit stuff

(require 'magit)

(defun disable-magit-highlight-in-buffer ()
  (face-remap-add-relative 'magit-item-highlight '()))

(add-hook 'magit-status-mode-hook 'disable-magit-highlight-in-buffer)

;; change magit diff colors
;(eval-after-load 'magit
;  '(custom-set-faces
;    '(magit-diff-add ((t (:foreground "#149914" :background nil :inherit nil))))
;    '(magit-diff-def ((t (:foreground "#991414" :background nil :inherit nil))))))

;  (progn
;     (set-face-foreground 'magit-diff-add "green3")
;     (set-face-foreground 'magit-diff-del "red3")
;     (when (not window-system)
;       (set-face-background 'magit-item-highlight "black"))))


  
