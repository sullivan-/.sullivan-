;; -*- mode: lisp-interaction -*-
;;
;; .emacs.sullivan-
;;
;; a .emacs to use anywhere. intended to be loaded from the real .emacs file like so:
;;
;; (load "~/.emacs.sullivan-")

;; hints:
;; M-C-x (eval-defun)


;;;; packages

(require 'package)
(setq
 package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
		    ("org" . "http://orgmode.org/elpa/")
		    ("melpa" . "http://melpa.org/packages/")
		    ("melpa-stable" . "http://stable.melpa.org/packages/"))
 package-archive-priorities '(("melpa-stable" . 1)))

(package-initialize)
(when (not package-archive-contents)
  (package-refresh-contents)
  (package-install 'use-package))

(package-install 'ssh-agency)
(require 'ssh-agency)

(package-install 'groovy-mode)
(require 'groovy-mode)

(package-install 'use-package)
(require 'use-package)

(package-install 'ggtags) ; what's ggtags?
(require 'ggtags)

;;;; general top-level cruff

(setq
 column-number-mode          t
 comment-end                 ""
 comment-start               "# "       ; i want the space there, for fundamental mode
 completion-ignore-case      t
 create-lockfiles            nil
 dabbrev-case-fold-search    nil
 default-major-mode          'text-mode
 find-file-visit-truename    t          ; follow sym links without asking
 inhibit-startup-message     t
 inhibit-startup-screen      t
 make-backup-files           nil
 manual-program              "man"
 scroll-error-top-bottom     t
 sentence-end-double-space   nil
 show-paren-delay            0.5
 text-mode-hook              'auto-fill-mode
 tramp-default-method        "ssh"
 use-package-always-ensure   t)

(add-to-list 'exec-path "/usr/local/bin")

(setq-default
 indent-tabs-mode          nil ; no tabs
 fill-column               100)

(fset 'yes-or-no-p 'y-or-n-p)

(global-set-key (kbd "C-x c") 'comment-region)
(global-set-key "\C-XM" 'magit-status)
(global-set-key "\C-XG" 'goto-line)
(global-set-key "\C-XI" 'indent-region)

(define-key ctl-x-map "\^M" 'magit-status)
(define-key ctl-x-map "\^G" 'goto-line)
(define-key ctl-x-map "\^I" 'indent-region)

(load "mbexpand" t t) ; expand filenames in minibuffer

(display-time)
(global-auto-revert-mode)
(column-number-mode)

(desktop-save-mode 1)

;;;; Mac / iTerm2 support

(unless window-system
  (require 'mouse)
  (xterm-mouse-mode t)
  (defun track-mouse (e))
  (setq mouse-sel-mode t))

(defun pbcopy ()
  (interactive)
  (call-process-region (point) (mark) "pbcopy")
  (setq deactivate-mark t))

(defun pbpaste ()
  (interactive)
  (call-process-region (point) (if mark-active (mark) (point)) "pbpaste" t t))

(global-set-key (kbd "C-c c") 'pbcopy)
(global-set-key (kbd "C-c v") 'pbpaste)
(global-set-key (kbd "C-c x") 'pbcut)

;;;; elisp-mode

(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (setq show-trailing-whitespace t)
            (show-paren-mode)
            ;; (focus-mode)
            ;; (rainbow-mode)
            (prettify-symbols-mode)
            (eldoc-mode)
            ;; (flycheck-mode)
            ;; (company-mode)
            ;; (smartparens-strict-mode)
            ;; (rainbow-delimiters-mode)
            ))

;;;; java-mode

(add-hook 'java-mode-hook
(function (lambda ()
            (c-set-offset 'substatement-open 0)
            (setq c-auto-newline nil)
            (setq c-basic-offset 4)
            (setq indent-tabs-mode nil))))

;;;; ido stuff - autocompletion for switching buffers and finding files

(require 'ido)
(setq
 ido-save-directory-list-file "~/.emacs.d/cache/ido.last"

 ido-ignore-buffers ;; ignore these guys
 '("\\` " "^\*Mess" "^\*Back" ".*Completion" "^\*Ido" "^\*trace"
   "^\*compilation" "^\*GTAGS" "^session\.*" "^\*")

 ido-case-fold  t                 ; be case-insensitive

 ido-enable-last-directory-history t ; remember last used dirs
 ido-max-work-directory-list 30   ; should be enough
 ido-max-work-file-list      50   ; remember many
 ido-use-filename-at-point nil    ; don't use filename at point (annoying)
 ido-use-url-at-point nil         ; don't use url at point (annoying)

 ido-enable-flex-matching nil     ; don't try to be too smart
 ido-max-prospects 8              ; don't spam my minibuffer
 ido-confirm-unique-completion t) ; wait for RET, even with unique completion

(setq confirm-nonexistent-file-or-buffer nil)
(ido-mode 'both) ; for buffers and files

(setq json-reformat:indent-width 2)
(setq js-indent-level 2)

;;;; lsp-scala

;; Enable defer and ensure by default for use-package
(setq use-package-always-defer t
      use-package-always-ensure t)

(use-package scala-mode :mode "\\.s\\(cala\\|bt\\)$")

(add-hook
 'scala-mode-hook
 (lambda ()
   (setq scala-indent:use-javadoc-style t)
   (setq-default tab-always-indent t)
   (setq scala-indent:use-javadoc-style t)
   ))

(use-package sbt-mode
  :commands sbt-start sbt-command
  :config
  ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
  ;; allows using SPACE when in the minibuffer
  (substitute-key-definition
   'minibuffer-complete-word
   'self-insert-command
   minibuffer-local-completion-map))

;; Enable nice rendering of diagnostics like compile errors.
(use-package flycheck :init (global-flycheck-mode))

(use-package lsp-mode :init (setq lsp-prefer-flymake nil))

(use-package lsp-ui)

(use-package company-lsp)

(use-package lsp-scala
  :after scala-mode
  :demand t
  :hook (scala-mode . lsp))

(setq xref-prompt-for-identifier '(not xref-find-definitions
                                       xref-find-definitions-other-window
                                       xref-find-definitions-other-frame
                                       xref-find-references))

;; some old scala stuff that probably doesnt do it anymore:

(scala-mode:goto-start-of-code)

(defun scala-mode-newline-comments ()
  "Custom newline appropriate for `scala-mode'."
  ;; shouldn't this be in a post-insert hook?
  (interactive)
  (newline-and-indent)
  (scala-indent:insert-asterisk-on-multiline-comment))

(bind-key "RET" 'scala-mode-newline-comments scala-mode-map)

;;;; magit stuff

(package-install 'magit)
(require 'magit)

(defun disable-magit-highlight-in-buffer ()
  (face-remap-add-relative 'magit-item-highlight '()))

(add-hook 'magit-status-mode-hook 'disable-magit-highlight-in-buffer)

;; change magit diff colors
;;(eval-after-load 'magit
;;  '(custom-set-faces
;;    '(magit-diff-add ((t (:foreground "#149914" :background nil :inherit nil))))
;;    '(magit-diff-def ((t (:foreground "#991414" :background nil :inherit nil))))))

;;  (progn
;;     (set-face-foreground 'magit-diff-add "green3")
;;     (set-face-foreground 'magit-diff-del "red3")
;;     (when (not window-system)
;;       (set-face-background 'magit-item-highlight "black"))))
